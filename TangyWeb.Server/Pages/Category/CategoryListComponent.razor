@page "/Category"
@using Tangy.Common
@inject ICategoryRepository categoryRepository
@inject IJSRuntime JsRuntime;
@attribute [Authorize(Roles =SD.Role_Admin)]


<_DeleteConfirmationComponent ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmationComponent>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="Category/Create" class="btn btn-info form-control">Add New Category</a>
    </div>
</div>
@if (this.categories.Any())
{
    @foreach (CategoryDto category in this.categories)
    {
        <div class="row mt-4">
            <div class="col-1">
                @category.Id
            </div>
            <div class="col-3">
                @category.Name
            </div>
            <div class="col-4">
                <NavLink href="@($"category/edit/{category.Id}")" class="btn btn-primary">Edit</NavLink>
                <button class="btn btn-danger" @onclick="() => HandleDelete(category.Id)">Delete</button>
            </div>
        </div>
    }
}
else
{
    @if(IsLoading){
    <img src="/images/animated-loading-gif-2.gif"/>
    }
    else{
        <div> No records found</div>
    }
}
@code {
    private IEnumerable<CategoryDto> categories { get; set; } = new List<CategoryDto>();
    private bool IsLoading = false;
    public int DeleteCategoryId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this.IsLoading = true;
        await Task.Run(LoadCategories);

        base.OnInitialized();
    }

    private void LoadCategories()
    {
        this.categories = this.categoryRepository.GetAll();
        this.IsLoading = false;
    }

    private void HandleDelete(int Id){
        this.DeleteCategoryId = Id;
        this.JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed){
        IsLoading = true;

        if(isConfirmed && this.DeleteCategoryId != 0){

            this.categoryRepository.Delete(this.DeleteCategoryId);
            LoadCategories();
            await this.JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }

        IsLoading = false;
    }
}
